service.name = metric-anomaly-task-manager
service.admin.port = 8099

main.class = org.hypertrace.alert.engine.metric.anomaly.task.manager.MetricAnomalyTaskManager

job.config {
  cronExpression = "0 * * * * ?"
  cronExpression = ${?JOB_CONFIG_CRON_EXPRESSION}
  delayInMinutes = 1
  executionWindowInMinutes = 1
  tenant_id = "__default"
  tenant_id = ${?DEFAULT_TENANT_ID}
}

alertRuleSource {
  type = "fs"
  fs {
    path = "/app/resources/configs/metric-anomaly-task-manager/rules.json"
    path = ${?ALERT_RULES_PATH}
  }
  dataStore {
    resourceName = "alertingEventConditionConfig"
    resourceNamespace = "alerting-v1"
    config.service {
      host=localhost
      host=${?HOST}
      port=55101
    }
    tenantIds = []
  }
}

queue.config {
  type = "kafka"
  kafka {
    bootstrap.servers = "localhost:9092"
    bootstrap.servers = ${?BOOTSTRAP_SERVERS}
    producer {
      topic = "alerting-metric-anomaly-alert-tasks"
      topic = ${?OUTPUT_TOPIC}
      # schema.registry.url=""
      # key.serializer="io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer"
      # value.serializer="io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer"
    }
  }
}

logger.names = ["file"]
logger.file.dir = "/var/logs/metric-anomaly-rule-manager"